[package]
name = "selendra-service"
version = "0.3.0"
authors = ["Selendra <info@selendra.org>"]
edition = "2021"
rust-version = "1.60"

[dependencies]
# External Crates
futures = "0.3.21"
hex-literal = "0.3.4"
gum = { package = "tracing-gum", path = "../node-helper/gum/" }
serde = { version = "1.0.137", features = ["derive"] }
serde_json = "1.0.81"
thiserror = "1.0.31"
kvdb = "0.12.0"
kvdb-rocksdb = { version = "0.16.0", optional = true }
parity-db = { version = "0.4.2", optional = true }
async-trait = "0.1.57"
lru = "0.8"

# Substrate Client
sc-authority-discovery = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
babe = { package = "sc-consensus-babe", git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
beefy-primitives = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
beefy-gadget = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
frame-support = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
grandpa = { package = "sc-finality-grandpa", git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-block-builder = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-chain-spec = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-client-api = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-client-db = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-consensus = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-consensus-slots = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-executor = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-network = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-network-common = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-transaction-pool = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-sync-state-rpc = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-keystore = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-basic-authorship = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-offchain = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sc-sysinfo = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
service = { package = "sc-service", git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0", default-features = false }
telemetry = { package = "sc-telemetry", git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }

# Substrate Primitives
sp-authority-discovery = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
consensus_common = { package = "sp-consensus", git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
grandpa_primitives = { package = "sp-finality-grandpa", git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
inherents = { package = "sp-inherents", git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-api = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-block-builder = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-blockchain = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-core = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-io = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-keystore = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-offchain = { package = "sp-offchain", git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-runtime = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-session = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-storage = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-transaction-pool = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-trie = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-timestamp = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-consensus-babe = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
sp-state-machine = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }

# Substrate Pallets
pallet-babe = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
pallet-im-online = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
pallet-staking = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
pallet-transaction-payment-rpc-runtime-api = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }

# Substrate Other
frame-system-rpc-runtime-api = { git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }
prometheus-endpoint = { package = "substrate-prometheus-endpoint", git = "https://github.com/paritytech/substrate", branch = "polkadot-v1.0.0" }

# Selendra
selendra-node-core-parachains-inherent = { path = "../node-helper/core/parachains-inherent" }
selendra-node-network-protocol = { path = "../node-helper/network/protocol" }
selendra-overseer = { path = "../node-helper/overseer" }
selendra-node-subsystem = {path = "../node-helper/subsystem" }
selendra-node-subsystem-util = { path = "../node-helper/subsystem-util" }
selendra-node-subsystem-types = { path = "../node-helper/subsystem-types" }
selendra-node-primitives = { path = "../node-helper/primitives" }
selendra-client = { path = "../client", default-features = false, optional = true }
selendra-rpc = { path = "../rpc" }
selendra-parachain = { path = "../../parachain" }
selendra-primitives = { path = "../../primitives" }
selendra-runtime-parachains = { path = "../../parachain/runtime" }
# Selendra Runtime Constants
selendra-runtime-constants = { path = "../../runtime/selendra/constants", optional = true }
# Selendra Runtimes
selendra-runtime = { path = "../../runtime/selendra", optional = true }

# Selendra Subsystems
selendra-approval-distribution = { path = "../node-helper/network/approval-distribution", optional = true }
selendra-availability-bitfield-distribution = { path = "../node-helper/network/bitfield-distribution", optional = true }
selendra-availability-distribution = { path = "../node-helper/network/availability-distribution", optional = true }
selendra-availability-recovery = { path = "../node-helper/network/availability-recovery", optional = true }
selendra-collator-protocol = { path = "../node-helper/network/collator-protocol", optional = true }
selendra-dispute-distribution = { path = "../node-helper/network/dispute-distribution", optional = true }
selendra-gossip-support = { path = "../node-helper/network/gossip-support", optional = true }
selendra-network-bridge = { path = "../node-helper/network/bridge", optional = true }
selendra-node-collation-generation = { path = "../node-helper/collation-generation", optional = true }
selendra-node-core-approval-voting = { path = "../node-helper/core/approval-voting", optional = true }
selendra-node-core-av-store = { path = "../node-helper/core/av-store", optional = true }
selendra-node-core-backing = { path = "../node-helper/core/backing", optional = true }
selendra-node-core-bitfield-signing = { path = "../node-helper/core/bitfield-signing", optional = true }
selendra-node-core-candidate-validation = { path = "../node-helper/core/candidate-validation", optional = true }
selendra-node-core-chain-api = { path = "../node-helper/core/chain-api", optional = true }
selendra-node-core-chain-selection = { path = "../node-helper/core/chain-selection", optional = true }
selendra-node-core-dispute-coordinator = { path = "../node-helper/core/dispute-coordinator", optional = true }
selendra-node-core-provisioner = { path = "../node-helper/core/provisioner", optional = true }
selendra-node-core-pvf-checker = { path = "../node-helper/core/pvf-checker", optional = true }
selendra-node-core-runtime-api = { path = "../node-helper/core/runtime-api", optional = true }
selendra-statement-distribution = { path = "../node-helper/network/statement-distribution", optional = true }

[dev-dependencies]
selendra-test-client = { path = "../test/client" }
selendra-node-subsystem-test-helpers = { path = "../node-helper/subsystem-test-helpers" }
env_logger = "0.9.0"
log = "0.4.17"
assert_matches = "1.5.0"
tempfile = "3.2"

[features]
default = ["db", "full-node", "selendra-native"]

db = [
	"service/rocksdb"
]

full-node = [
	"selendra-node-core-av-store",
	"selendra-node-core-approval-voting",
	"selendra-availability-bitfield-distribution",
	"selendra-availability-distribution",
	"selendra-availability-recovery",
	"selendra-client",
	"selendra-collator-protocol",
	"selendra-dispute-distribution",
	"selendra-gossip-support",
	"selendra-network-bridge",
	"selendra-node-collation-generation",
	"selendra-node-core-backing",
	"selendra-node-core-bitfield-signing",
	"selendra-node-core-candidate-validation",
	"selendra-node-core-chain-api",
	"selendra-node-core-chain-selection",
	"selendra-node-core-dispute-coordinator",
	"selendra-node-core-provisioner",
	"selendra-node-core-runtime-api",
	"selendra-statement-distribution",
	"selendra-approval-distribution",
	"selendra-node-core-pvf-checker",
	"kvdb-rocksdb",
	"parity-db",
]

# Configure the native runtimes to use. Selendra is enabled by default.
#
# Validators require the native runtime currently
selendra-native = [ "selendra-runtime", "selendra-runtime-constants", "selendra-client/selendra" ]

runtime-benchmarks = [
	"selendra-runtime?/runtime-benchmarks",
	"service/runtime-benchmarks",
]
try-runtime = [
	"selendra-runtime?/try-runtime",
]
fast-runtime = [
	"selendra-runtime?/fast-runtime",
]

malus = ["full-node"]
runtime-metrics = [
	"selendra-client/runtime-metrics",
	"selendra-runtime?/runtime-metrics",
	"selendra-runtime-parachains/runtime-metrics"
]
