
//! Autogenerated weights for `pallet_offences`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-13, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("selendra-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/selendra
// benchmark
// pallet
// --chain=selendra-dev
// --steps=50
// --repeat=20
// --pallet=pallet_offences
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/selendra/src/weights/pallet_offences.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_offences`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_offences::WeightInfo for WeightInfo<T> {
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: Offences Reports (r:100 w:100)
	// Storage: Staking SlashRewardFraction (r:1 w:0)
	// Storage: Staking ActiveEra (r:1 w:0)
	// Storage: Staking ErasStartSessionIndex (r:1 w:0)
	// Storage: Staking EarliestUnappliedSlash (r:1 w:1)
	// Storage: Staking Invulnerables (r:1 w:0)
	// Storage: Staking ValidatorSlashInEra (r:100 w:100)
	// Storage: Staking SlashingSpans (r:1700 w:1700)
	// Storage: Staking SpanSlash (r:1700 w:1700)
	// Storage: Staking Validators (r:100 w:100)
	// Storage: Staking CounterForValidators (r:1 w:1)
	// Storage: BagsList ListNodes (r:300 w:300)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Storage: Staking Nominators (r:100 w:0)
	// Storage: Staking OffendingValidators (r:1 w:1)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Staking NominatorSlashInEra (r:1600 w:1600)
	// Storage: Staking UnappliedSlashes (r:1 w:1)
	// Storage: BagsList ListBags (r:1 w:1)
	fn report_offence_im_online(r: u32, o: u32, n: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_230_000
			.saturating_add((128_963_000 as Weight).saturating_mul(r as Weight))
			// Standard Error: 1_245_000
			.saturating_add((444_489_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 13_146_000
			.saturating_add((1_285_416_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads((57 as Weight).saturating_mul(o as Weight)))
			.saturating_add(T::DbWeight::get().reads((303 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((56 as Weight).saturating_mul(o as Weight)))
			.saturating_add(T::DbWeight::get().writes((303 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Staking SlashRewardFraction (r:1 w:0)
	// Storage: Staking ActiveEra (r:1 w:0)
	// Storage: Staking ErasStartSessionIndex (r:1 w:0)
	// Storage: Staking EarliestUnappliedSlash (r:1 w:1)
	// Storage: Staking Invulnerables (r:1 w:0)
	// Storage: Staking ValidatorSlashInEra (r:1 w:1)
	// Storage: Staking SlashingSpans (r:1 w:1)
	// Storage: Staking SpanSlash (r:1 w:1)
	// Storage: Staking Validators (r:1 w:1)
	// Storage: Staking CounterForValidators (r:1 w:1)
	// Storage: BagsList ListNodes (r:2 w:2)
	// Storage: BagsList ListBags (r:1 w:1)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Storage: Staking Nominators (r:1 w:0)
	// Storage: Staking OffendingValidators (r:1 w:1)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Staking UnappliedSlashes (r:1 w:1)
	// Storage: Staking NominatorSlashInEra (r:1 w:1)
	fn report_offence_grandpa(n: u32, ) -> Weight {
		(77_981_000 as Weight)
			// Standard Error: 151_000
			.saturating_add((10_346_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(21 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: Offences ReportsByKindIndex (r:1 w:1)
	// Storage: Offences ConcurrentReportsIndex (r:1 w:1)
	// Storage: Offences Reports (r:1 w:1)
	// Storage: Staking SlashRewardFraction (r:1 w:0)
	// Storage: Staking ActiveEra (r:1 w:0)
	// Storage: Staking ErasStartSessionIndex (r:1 w:0)
	// Storage: Staking EarliestUnappliedSlash (r:1 w:1)
	// Storage: Staking Invulnerables (r:1 w:0)
	// Storage: Staking ValidatorSlashInEra (r:1 w:1)
	// Storage: Staking SlashingSpans (r:1 w:1)
	// Storage: Staking SpanSlash (r:1 w:1)
	// Storage: Staking Validators (r:1 w:1)
	// Storage: Staking CounterForValidators (r:1 w:1)
	// Storage: BagsList ListNodes (r:2 w:2)
	// Storage: BagsList ListBags (r:1 w:1)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Storage: Staking Nominators (r:1 w:0)
	// Storage: Staking OffendingValidators (r:1 w:1)
	// Storage: Session Validators (r:1 w:0)
	// Storage: Staking UnappliedSlashes (r:1 w:1)
	// Storage: Staking NominatorSlashInEra (r:1 w:1)
	fn report_offence_babe(n: u32, ) -> Weight {
		(75_472_000 as Weight)
			// Standard Error: 108_000
			.saturating_add((10_295_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(21 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes(15 as Weight))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(n as Weight)))
	}
}
