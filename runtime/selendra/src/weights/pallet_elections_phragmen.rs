
//! Autogenerated weights for `pallet_elections_phragmen`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-22, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `s-02-v-02`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("selendra-dev")`, DB CACHE: 1024

// Executed Command:
// ./target/production/selendra
// benchmark
// pallet
// --chain=selendra-dev
// --steps=50
// --repeat=20
// --pallet=pallet_elections_phragmen
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/selendra/src/weights/pallet_elections_phragmen.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_elections_phragmen`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_elections_phragmen::WeightInfo for WeightInfo<T> {
	/// Storage: `PhragmenElection::Candidates` (r:1 w:0)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:0)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:0)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Voting` (r:1 w:1)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[1, 16]`.
	fn vote_equal(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369 + v * (80 ±0)`
		//  Estimated: `4764 + v * (80 ±0)`
		// Minimum execution time: 23_915_000 picoseconds.
		Weight::from_parts(24_502_068, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			// Standard Error: 1_392
			.saturating_add(Weight::from_parts(69_901, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 80).saturating_mul(v.into()))
	}
	/// Storage: `PhragmenElection::Candidates` (r:1 w:0)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:0)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:0)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Voting` (r:1 w:1)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[2, 16]`.
	fn vote_more(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `337 + v * (80 ±0)`
		//  Estimated: `4764 + v * (80 ±0)`
		// Minimum execution time: 33_212_000 picoseconds.
		Weight::from_parts(33_878_083, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			// Standard Error: 2_677
			.saturating_add(Weight::from_parts(98_828, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 80).saturating_mul(v.into()))
	}
	/// Storage: `PhragmenElection::Candidates` (r:1 w:0)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:0)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:0)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Voting` (r:1 w:1)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[2, 16]`.
	fn vote_less(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369 + v * (80 ±0)`
		//  Estimated: `4764 + v * (80 ±0)`
		// Minimum execution time: 33_193_000 picoseconds.
		Weight::from_parts(33_807_138, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			// Standard Error: 1_930
			.saturating_add(Weight::from_parts(100_951, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 80).saturating_mul(v.into()))
	}
	/// Storage: `PhragmenElection::Voting` (r:1 w:1)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn remove_voter() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `891`
		//  Estimated: `4764`
		// Minimum execution time: 35_076_000 picoseconds.
		Weight::from_parts(35_857_000, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `PhragmenElection::Candidates` (r:1 w:1)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:0)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:0)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 1000]`.
	fn submit_candidacy(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2358 + c * (48 ±0)`
		//  Estimated: `3841 + c * (48 ±0)`
		// Minimum execution time: 26_269_000 picoseconds.
		Weight::from_parts(25_291_974, 0)
			.saturating_add(Weight::from_parts(0, 3841))
			// Standard Error: 585
			.saturating_add(Weight::from_parts(52_396, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 48).saturating_mul(c.into()))
	}
	/// Storage: `PhragmenElection::Candidates` (r:1 w:1)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 1000]`.
	fn renounce_candidacy_candidate(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `250 + c * (48 ±0)`
		//  Estimated: `1714 + c * (48 ±0)`
		// Minimum execution time: 23_494_000 picoseconds.
		Weight::from_parts(21_826_021, 0)
			.saturating_add(Weight::from_parts(0, 1714))
			// Standard Error: 596
			.saturating_add(Weight::from_parts(37_813, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 48).saturating_mul(c.into()))
	}
	/// Storage: `PhragmenElection::Members` (r:1 w:1)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:1)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:1 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Members` (r:0 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn renounce_candidacy_members() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2683`
		//  Estimated: `4168`
		// Minimum execution time: 33_473_000 picoseconds.
		Weight::from_parts(34_134_000, 0)
			.saturating_add(Weight::from_parts(0, 4168))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:1)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn renounce_candidacy_runners_up() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1762`
		//  Estimated: `3247`
		// Minimum execution time: 23_804_000 picoseconds.
		Weight::from_parts(24_306_000, 0)
			.saturating_add(Weight::from_parts(0, 3247))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Benchmark::Override` (r:0 w:0)
	/// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_member_without_replacement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000_000_000 picoseconds.
		Weight::from_parts(2_000_000_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `PhragmenElection::Members` (r:1 w:1)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:1)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:1 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Members` (r:0 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_member_with_replacement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2857`
		//  Estimated: `6196`
		// Minimum execution time: 52_539_000 picoseconds.
		Weight::from_parts(52_979_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `PhragmenElection::Voting` (r:10001 w:10000)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:0)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:0)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Candidates` (r:1 w:0)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:10000 w:10000)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:10000 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:10000 w:10000)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `v` is `[5000, 10000]`.
	/// The range of component `d` is `[0, 5000]`.
	fn clean_defunct_voters(v: u32, _d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `36046 + v * (808 ±0)`
		//  Estimated: `39744 + v * (3774 ±0)`
		// Minimum execution time: 309_308_841_000 picoseconds.
		Weight::from_parts(309_853_853_000, 0)
			.saturating_add(Weight::from_parts(0, 39744))
			// Standard Error: 270_290
			.saturating_add(Weight::from_parts(38_817_316, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 3774).saturating_mul(v.into()))
	}
	/// Storage: `PhragmenElection::Candidates` (r:1 w:1)
	/// Proof: `PhragmenElection::Candidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Members` (r:1 w:1)
	/// Proof: `PhragmenElection::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::RunnersUp` (r:1 w:1)
	/// Proof: `PhragmenElection::RunnersUp` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PhragmenElection::Voting` (r:10001 w:0)
	/// Proof: `PhragmenElection::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:968 w:968)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PhragmenElection::ElectionRounds` (r:1 w:1)
	/// Proof: `PhragmenElection::ElectionRounds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Members` (r:0 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:0 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 1000]`.
	/// The range of component `v` is `[1, 10000]`.
	/// The range of component `e` is `[10000, 160000]`.
	fn election_phragmen(c: u32, v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + e * (28 ±0) + v * (607 ±0)`
		//  Estimated: `2772152 + c * (2560 ±0) + e * (16 ±0) + v * (2744 ±4)`
		// Minimum execution time: 30_084_456_000 picoseconds.
		Weight::from_parts(30_199_964_000, 0)
			.saturating_add(Weight::from_parts(0, 2772152))
			// Standard Error: 263_119
			.saturating_add(Weight::from_parts(21_393_292, 0).saturating_mul(v.into()))
			// Standard Error: 16_885
			.saturating_add(Weight::from_parts(1_041_511, 0).saturating_mul(e.into()))
			.saturating_add(T::DbWeight::get().reads(270))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2560).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 16).saturating_mul(e.into()))
			.saturating_add(Weight::from_parts(0, 2744).saturating_mul(v.into()))
	}
}
